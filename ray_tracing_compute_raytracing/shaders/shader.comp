#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable

#define EPSILON 0.0001

#define WIDTH 1280
#define HEIGHT 720
#define WORKGROUP_SIZE 32
layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;

struct Pixel{
  vec4 value;
};

struct Camera 
{
	vec3 pos;   
	vec3 lookat;
	float fov; 
};

layout(std140, binding = 0) buffer buf
{
   Pixel imageData[];
};
//layout (binding = 0, rgba8) uniform writeonly image2D resultImage;

layout(binding = 1) uniform UniformBufferObject
{
  mat4 view;
  mat4 proj;
  mat4 viewI;
}
ubo;


struct Sphere 
{
	vec3 pos;
	float radius;
	vec3 diffuse;
	float specular;
	int id;
};
layout (std140, binding = 2) buffer Spheres
{
	Sphere spheres[ ];
};

//TODO
//layout(binding = 7, set = 0) uniform accelerationStructureEXT topLevelAS;

// Sphere ===========================================================

float sphereIntersect(in vec3 rayO, in vec3 rayD, in Sphere sphere)
{
	vec3 oc = rayO - sphere.pos;
	float b = 2.0 * dot(oc, rayD);
	float c = dot(oc, oc) - sphere.radius*sphere.radius;
	float h = b*b - 4.0*c;
	if (h < 0.0) 
	{
		return -1.0;
	}
	float t = (-b - sqrt(h)) / 2.0;

	return t;
}
int intersect(in vec3 rayO, in vec3 rayD, inout float resT)
{
	int id = -1;

	//for (int i = 0; i < spheres.length(); i++)
	Sphere sph;
	sph.pos = vec3(0,0,-2);
	sph.radius = 0.5;
	//{
		float tSphere = sphereIntersect(rayO, rayD, sph);
		if ((tSphere > EPSILON) && (tSphere < resT))
		{
			id = 1;
			resT = tSphere;
		}
	//}		
	return id;
}
void main() {

  /*
  In order to fit the work into workgroups, some unnecessary threads are launched.
  We terminate those threads here. 
  */
  if(gl_GlobalInvocationID.x >= WIDTH || gl_GlobalInvocationID.y >= HEIGHT)
    return;

  float x = float(gl_GlobalInvocationID.x) / float(WIDTH);
  float y = float(gl_GlobalInvocationID.y) / float(HEIGHT);

	ivec2 dim = ivec2(WIDTH, HEIGHT);
	vec2 uv = vec2(gl_GlobalInvocationID.xy) / vec2(dim);
	float aspectRatio = float(WIDTH)/float(HEIGHT);
	vec3 rayO = vec3(0,0,0);
	vec3 rayD = normalize(vec3((-1.0 + 2.0 * uv) * vec2(aspectRatio, 1.0), -1.0));
	float t = 1e6;
  int id = intersect(rayO, rayD, t);
  vec4 color = vec4(uv,0,1.0);
  if (id > 0)
	color = vec4(1,0,0,1);
  // store the rendered mandelbrot set into a storage buffer:
  imageData[WIDTH * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x].value = color;
  //imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), color);
}